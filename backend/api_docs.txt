Energy Insignt Backend API


=== InfluxdB Series ===

1. Get series from influxdb can be acheived use POST request to following URL. <id> is the energy unit id, which can be 
    POST /api/getseries/<id>/

    Following list is parameters supported:
        start_utc: starting utc time for requested series
        end_utc:   end time for requested series
        time_format: time format for start-end time. in "s"econd or "ms"
        interval:  time interval for returned data. Default is 'auto'
        operation:  operation for returned value. Default is 'raw'
        isExternalRequest : it is a deprecated parameter for an basic authentication non-browser device
        limit:  max number of returned data
        disagg:   it is used if <id> is a building. The possible values are 
            'total': total energy usage for first level meters
            'all':   all six segamented energy usage as below
            'lighting': '照明用电',
            'plug': '设备与插座',
            'heating': '取暖用电',
            'motor': '动力用电',
            'cooling': '空调制冷',
            'misc': '特殊用电'


2. Put Series API is used to upload data to influxdb.
    POST /api/putseries/<id>/

    Majority of get series parameters are supported here. A few addition:
    points:   data points
    erase_flag:   if the upload need to erase previous data in the time range


3. Acquire weather data. To be updated
    GET /api/putseries/<id>/

4. Predict new baseline usage using a historical baseline time window
    POST /api/predictseries/<id>/

    Most of get series parameter inherited from getseries.
    base_start_utc: baseline time window start time
    base_end_utc:  baseline time window end time

 

=== Energy Units ===
Allowed operation is GET, POST, PUT, DELETE

1. Energy Units. 

    1.1 Get list of units
    GET  /api/energyunit/?format=json
                         &id=2                                // filter single ID=2
                         &id__in=1,2,3,4                      // filter list of ID
                         &type__id=1                          // filter type ID
                         &type__id__in=1,2                    // filter list of type ID
                         &type__name=Building                 // filter type name 
                         &type__name__in=Building,Campus      // filter list of type name 

    1.2 Add new unit
    POST /api/energyunit/

    1.3 Update one entry
    PUT
    
    1.4 Delete one entry
    DELETE


2. Individual energy unit end point

    Allowed operation is GET, PUT, DELETE
    [GET|PUT|DELETE] /api/energyunit/5/?format=json



=== Unit Type ===
1. Get list of unit type
    GET /api/unittype/?format=json 



=== Campus Parameter ===
=== Building Parameter ===
=== Meter Parameter ===
    Allowed operation GET/PUT/POST

    GET /api/buildingparam/?format=json


    Example for creation of a new energyunit:
    {"name": "test", "type": "/api/unittype/Meter/"}

    
    Example of body for PUT request to change a status of Recommendation:
    {"status": "/api/recommendation_status/1/"}


=== Log in and Log out a user via API call ===
    send a POST API request to these address:
        /api/user_account/logout/

    variables, which should be sent:
        username, password
    For example:
    {"username": "demouser", "password": "demouser" }

    Logout a user:
    send a POST API request to these address:
        /api/user_account/logout/


        To test it locally via external REST tool you should use the address with "http://localhost:8000" /api/user_account/logout/
        For example:
        http://localhost:8000/api/user_account/logout/

=== Log in a user via jwt token ===
    send a POST request to /api-token-auth/

    variables to be sent:
    {"username":"demouser","password":"demouser"}

    If accepted, the server will return a json object in the form:
    {"token":"XXXXX"}

    Inject this token in every GET, POST, PUT request header. The header value pair is:

    AUTHORIZATION: Bearer XXXXXXX

    The token is set to expire every 3 hours. In the last hour, if any request is made, the server response will include a renewed token in the header with the same format.
    Be sure to check it and update the cached token.

    Log out is the same as api call.


